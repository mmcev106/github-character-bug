=pod

=for comment
DO NOT EDIT. This Pod was generated by Swim v0.1.48.
See http://github.com/ingydotnet/swim-pm#readme

=encoding utf8

=over

=item * Branching with subrepos JustWorks™.

=item * Different branches can have different subrepos in different states, etc.

=item * Moving/renaming/deleting a subrepo subdir JustWorks™.

=item * You can C<init> an existing subdirectory into a subrepo.

=item * Your git history is kept squeaky clean.

=item * Upstream history (clone/pull) is condensed into a single commit.

=item * Pulls can use a C<merge>, C<rebase> or C<force> strategies.

=item * You can see the subrepo history with C<< git log subrepo/<subdir>/fetch >>.

=item * Commits pushed back upstream are B<not> condensed (by default).

=item * Trivial to try any subrepo operations and then reset back.

=item * No configuration required.

=item * Does not introduce history that messes up other git commands.

=item * Fixes known rebase failures with C<git-subtree>.

=back

=head1 Installation

The best short answer is:

    git clone https://github.com/ingydotnet/git-subrepo /path/to/git-subrepo
    echo 'source /path/to/git-subrepo/.rc' >> ~/.bashrc

The complete "Installation Instructions" can be found below.

Note: git-subrepo needs a git version (> 2.7) that supports worktree:s.

=head1 Commands

All the B<subrepo> commands use names of actual Git commands and try to do
operations that are similar to their Git counterparts. They also attempt to
give similar output in an attempt to make the subrepo usage intuitive to
experienced Git users.

Please note that the commands are I<not> exact equivalents, and do not take
all the same arguments. Keep reading…

=over

=item C<< git subrepo clone <repository> [<subdir>] [-b <branch>] [-f] [-m <msg>] [--file=<msg file>] [-e] [--method <merge|rebase>] >>

Add a repository as a subrepo in a subdir of your repository.

This is similar in feel to C<git clone>. You just specify the remote repo url,
and optionally a sub-directory and/or branch name. The repo will be fetched
and merged into the subdir.

The subrepo history is I<squashed> into a single commit that contains the
reference information. This information is also stored in a special file
called C<< <subdir>/.gitrepo >>. The presence of this file indicates that the
directory is a subrepo.

All subsequent commands refer to the subrepo by the name of the
I<subdir>. From the subdir, all the current information about the subrepo
can be obtained.

The C<--force> option will "reclone" (completely replace) an existing subdir.

The C<--method> option will decide how the join process between branches are
performed. The default option is merge.

The C<clone> command accepts the C<--branch=> C<--edit>, C<--file>, C<--force>
and C<--message=> options.

=item C<< git subrepo init <subdir> [-r <remote>] [-b <branch>] [--method <merge|rebase>] >>

Turn an existing subdirectory into a subrepo.

If you want to expose a subdirectory of your project as a published subrepo,
this command will do that. It will split out the content of a normal
subdirectory into a branch and start tracking it as a subrepo. Afterwards your
original repo will look exactly the same except that there will be a C<<<subdir>/.gitrepo >> file.

If you specify the C<--remote> (and optionally the C<--branch>) option, the
values will be added to the C<< <subdir>/.gitrepo >> file. The C<--remote>
option is the upstream URL, and the C<--branch> option is the upstream branch
to push to. These values will be needed to do a C<git subrepo push> command,
but they can be provided later on the C<push> command (and saved to C<<<subdir>/.gitrepo >> if you also specify the C<--update> option).

Note: You will need to create the empty upstream repo and push to it on your
      own, using C<< git subrepo push <subdir> >>.

The C<--method> option will decide how the join process between branches are
performed. The default option is merge.

The C<init> command accepts the C<--branch=> and C<--remote=> options.

=item C<< git subrepo pull <subdir>|--all [-M|-R|-f] [-m <msg>] [--file=<msg file>] [-e] [-b <branch>] [-r <remote>] [-u] >>

Update the subrepo subdir with the latest upstream changes.

The C<pull> command fetches the latest content from the remote branch pointed
to by the subrepo's C<.gitrepo> file, and then tries to merge the changes into
the corresponding subdir. It does this by making a branch of the local commits
to the subdir and then merging or rebasing (see below) it with the fetched
upstream content. After the merge, the content of the new branch replaces your
subdir, the C<.gitrepo> file is updated and a single 'pull' commit is added to
your mainline history.

The C<pull> command will attempt to do the following commands in one go:

    git subrepo fetch <subdir>
    git subrepo branch <subdir>
    git merge/rebase subrepo/<subdir>/fetch subrepo/<subdir>
    git subrepo commit <subdir>
    # Only needed for a consequential push:
    git update-ref refs/subrepo/<subdir>/pull subrepo/<subdir>

In other words, you could do all the above commands yourself, for the same
effect. If any of the commands fail, subrepo will stop and tell you to finish
this by hand. Generally a failure would be in the merge or rebase part, where
conflicts can happen. Since Git has lots of ways to resolve conflicts to your
personal tastes, the subrepo command defers to letting you do this by hand.

When pulling new data, the method selected in clone/init is used. This has no
effect on the final result of the pull, since it becomes a single commit. But
it does affect the resulting C<< subrepo/<subdir> >> branch, which is often
used for a subrepo C<push> command. See 'push' below for more information. If
you want to change the method you can use the C<config> command for this.

When you pull you can assume a fast-forward strategy (default) or you can
specify a C<--rebase>, C<--merge> or C<--force> strategy. The latter is the
same as a C<clone --force> operation, using the current remote and branch.

Like the C<clone> command, C<pull> will squash all the changes (since the last
pull or clone) into one commit. This keeps your mainline history nice and
clean. You can easily see the subrepo's history with the C<git log> command:

    git log refs/subrepo/<subdir>/fetch

The set of commands used above are described in detail below.

The C<pull> command accepts the C<--all>, C<--branch=>, C<--edit>, C<--file>,
C<--force>, C<--message=>, C<--remote=> and C<--update> options.

=item C<< git subrepo push <subdir>|--all [<branch>] [-m msg] [--file=<msg file>] [-r <remote>] [-b <branch>] [-M|-R] [-u] [-f] [-s] [-N] >>

Push a properly merged subrepo branch back upstream.

This command takes the subrepo branch from a successful pull command and
pushes the history back to its designated remote and branch. You can also use
the C<branch> command and merge things yourself before pushing if you want to
(although that is probably a rare use case).

The C<push> command requires a branch that has been properly merged/rebased
with the upstream HEAD (unless the upstream HEAD is empty, which is common
when doing a first C<push> after an C<init>). That means the upstream HEAD is
one of the commits in the branch.

By default the branch ref C<< refs/subrepo/<subdir>/pull >> will be pushed,
but you can specify a (properly merged) branch to push.

After that, the C<push> command just checks that the branch contains the
upstream HEAD and then pushes it upstream.

The C<--force> option will do a force push. Force pushes are typically
discouraged. Only use this option if you fully understand it. (The C<--force>
option will NOT check for a proper merge. ANY branch will be force pushed!)

The C<push> command accepts the C<--all>, C<--branch=>, C<--dry-run>, C<--file>, C<--force>, C<--merge>, C<--message>, C<--rebase>, C<--remote=>, C<--squash> and C<--update> options.

=item C<< git subrepo fetch <subdir>|--all [-r <remote>] [-b <branch>] >>

Fetch the remote/upstream content for a subrepo.

It will create a Git reference called C<< subrepo/<subdir>/fetch >> that
points at the same commit as C<FETCH_HEAD>. It will also create a remote
called C<< subrepo/<subdir> >>. These are temporary and you can easily remove
them with the subrepo C<clean> command.

The C<fetch> command accepts the C<--all>, C<--branch=> and C<--remote=> options.

=item C<< git subrepo branch <subdir>|--all [-f] [-F] >>

Create a branch with local subrepo commits.

Scan the history of the mainline for all the commits that affect the C<subdir>
and create a new branch from them called C<< subrepo/<subdir> >>.

This is useful for doing C<pull> and C<push> commands by hand.

Use the C<--force> option to write over an existing C<< subrepo/<subdir>
>> branch.

The C<branch> command accepts the C<--all>, C<--fetch> and C<--force> options.

=item C<< git subrepo commit <subdir> [<subrepo-ref>] [-m <msg>] [--file=<msg file>] [-e] [-f] [-F] >>

Add subrepo branch to current history as a single commit.

This command is generally used after a hand-merge. You have done a C<subrepobranch> and merged (rebased) it with the upstream. This command takes the HEAD
of that branch, puts its content into the subrepo subdir and adds a new commit
for it to the top of your mainline history.

This command requires that the upstream HEAD be in the C<< subrepo/<subdir> >>
branch history. That way the same branch can push upstream. Use the C<--force>
option to commit anyway.

The C<commit> command accepts the C<--edit>, C<--fetch>, C<--file>, C<--force>
and C<--message=> options.

=item C<< git subrepo status [<subdir>|--all|--ALL] [-F] [-q|-v] >>

Get the status of a subrepo. Uses the C<--all> option by default. If the C<--quiet> flag is used, just print the subrepo names, one per line.

The C<--verbose> option will show all the recent local and upstream commits.

Use C<--ALL> to show the subrepos of the subrepos (ie the
"subsubrepos"), if any.

The C<status> command accepts the C<--all>, C<--ALL>, C<--fetch>, C<--quiet>
and C<--verbose> options.

=item C<< git subrepo clean <subdir>|--all|--ALL [-f] >>

Remove artifacts created by C<fetch> and C<branch> commands.

The C<fetch> and C<branch> operations (and other commands that call them)
create temporary things like refs, branches and remotes. This command removes
all those things.

Use C<--force> to remove refs. Refs are not removed by default because they
are sometimes needed between commands.

Use C<--all> to clean up after all the current subrepos. Sometimes you might
change to a branch where a subrepo doesn't exist, and then C<--all> won't find
it. Use C<--ALL> to remove any artifacts that were ever created by subrepo.

To remove ALL subrepo artifacts:

    git subrepo clean --ALL --force

The C<clean> command accepts the C<--all>, C<--ALL>, and C<--force> options.

=item C<< git subrepo config <subdir> <option> [<value>] [-f] >>

Read or update configuration values in the subdir/.gitrepo file.

Because most of the values stored in the .gitrepo file are generated you
will need to use C<--force> if you want to change anything else then the
C<method> option.

Example to update the C<method> option for a subrepo:

    git subrepo config foo method rebase

=item C<< git subrepo help [<command>|--all] >>

Same as C<git help subrepo>. Will launch the manpage. For the shorter usage,
use C<git subrepo -h>.

Use C<< git subrepo help <command> >> to get help for a specific command. Use
C<--all> to get a summary of all commands.

The C<help> command accepts the C<--all> option.

=item C<git subrepo version [-q|-v]>

This command will display version information about git-subrepo and its
environment. For just the version number, use C<git subrepo --version>. Use
C<--verbose> for more version info, and C<--quiet> for less.

The C<version> command accepts the C<--quiet> and C<--verbose> options.

=item C<git subrepo upgrade>

Upgrade the C<git-subrepo> software itself. This simply does a C<git pull>
on the git repository that the code is running from. It only works if you
are on the C<master> branch. It won't work if you installed C<git-subrepo>
using C<make install>; in that case you'll need to C<make install> from the
latest code.

=back

=head1 Command Options

=over

=cut