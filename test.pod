=pod

=for comment
DO NOT EDIT. This Pod was generated by Swim v0.1.48.
See http://github.com/ingydotnet/swim-pm#readme

=encoding utf8

=over

=item * Branching with subrepos JustWorks™.

=item * Different branches can have different subrepos in different states, etc.

=item * Moving/renaming/deleting a subrepo subdir JustWorks™.

=item * You can C<init> an existing subdirectory into a subrepo.

=item * Your git history is kept squeaky clean.

=item * Upstream history (clone/pull) is condensed into a single commit.

=item * Pulls can use a C<merge>, C<rebase> or C<force> strategies.

=item * You can see the subrepo history with C<< git log subrepo/<subdir>/fetch >>.

=item * Commits pushed back upstream are B<not> condensed (by default).

=item * Trivial to try any subrepo operations and then reset back.

=item * No configuration required.

=item * Does not introduce history that messes up other git commands.

=item * Fixes known rebase failures with C<git-subtree>.

=back

=item C<-h>

Show a brief view of the commands and options.

=item C<--help>

Gives an overview of the help options available for the subrepo command.

=item C<--version>

Print the git-subrepo version. Just the version number. Try the C<version>
command for more version info.

=item C<--all> (C<-a>)

If you have multiple subrepos, issue the command to all of them (if
applicable).

=item C<--ALL> (C<-A>)

If you have subrepos that also have subrepos themselves, issue the command to
ALL of them. Note that the C<--ALL> option only works for a subset of the
commands that C<--all> works for.

=item C<< --branch=<branch-name> >> (C<< -b <branch-name> >>)

Use a different upstream branch-name than the remote HEAD or the one saved in
C<.gitrepo> locally.

=item C<--dry-run> (C<-N>)

For the push command, do everything up until the push and then print out the
actual C<git push> command needed to finish the operation.

=item C<--edit> (C<-e>)

Edit the commit message before committing.

=item C<--fetch> (C<-F>)

Use this option to fetch the upstream commits, before running the command.

=item C<< --file=<commit msg file> >>

Supply your own commit message from a file

=item C<--force> (C<-f>)

Use this option to force certain commands that fail in the general case.

NOTE: The C<--force> option means different things for different commands.
      Read the command specific doc for the exact meaning.

=item C<--merge> (C<-M>)

Use a C<merge> strategy to include upstream subrepo commits on a pull (or
setup for push).

=item C<< --message=<message> >> (C<< -m <message> >>)

Specify your own commit message on the command line.

=item C<--rebase> (C<-R>)

Use a C<rebase> strategy to include upstream subrepo commits on a pull (or
setup for push).

=item C<< --remote=<remote-url> >> (C<< -r <remote-url> >>)

Use a different remote-url than the one saved in C<.gitrepo> locally.

=item C<--squash> (C<-s>)

Squash all commits on a push into one new commit.

=item C<--update> (C<-u>)

If C<--branch> or C<--remote> are used, and the command updates the
C<.gitrepo> file, include these values to the update.

=back

=head1 Output Options

=over

=item C<--quiet> (C<-q>)

Print as little info as possible. Applicable to most commands.

=item C<--verbose> (C<-v>)

Print more information about the command execution and results. Applicable to
most commands.

=item C<--debug> (C<-d>)

Show the actual git (and other) commands being executed under the hood.
Applicable to most commands.

=item C<--DEBUG> (C<-x>)

Use the Bash C<set -x> option which prints every command before it is
run. VERY noisy, but extremely useful in deep debugging. Applicable to
all commands.

=back

=head1 Environment Variables

The C<git-subrepo> command exports and honors some environment variables:

=over

=item C<GIT_SUBREPO_ROOT>

This is set by the C<.rc> file, if you use that method to install / enable C<git-subrepo>. It contains the path of the C<git-subrepo> repository.

=item C<GIT_SUBREPO_RUNNING>

This variable is exported when C<git-subrepo> is running. It is set to the pid
of the C<git-subrepo> process that is running. Other processes, like git hooks
for instance, can use this information to adjust accordingly.

=item C<GIT_SUBREPO_COMMAND>

This variable is exported when C<git-subrepo> is running. It is set to the
name of the C<git-subrepo> subcommand that is running.

=item C<GIT_SUBREPO_PAGER>

Use this to specify the pager to use for long output commands. Defaults to
C<$PAGER> or C<less>.

=item C<GIT_SUBREPO_QUIET>

Set this for quiet (C<-q>) output.

=item C<GIT_SUBREPO_VERBOSE>

Set this for verbose (C<-v>) output.

=item C<GIT_SUBREPO_DEBUG>

Set this for debugging (C<-d>) output.

=back

=head1 Installation Instructions

There are currently 3 ways to install C<git-subrepo>. For all of them you need
to get the source code from GitHub:

    git clone https://github.com/ingydotnet/git-subrepo /path/to/git-subrepo

The first installation method is preferred: C<source> the C<.rc> file. Just
add a line like this one to your shell startup script:

    source /path/to/git-subrepo/.rc

That will modify your C<PATH> and C<MANPATH>, and also enable command
completion.

The second method is to do these things by hand. This might afford you more
control of your shell environment. Simply add the C<lib> and C<man>
directories to your C<PATH> and C<MANPATH>:

    export GIT_SUBREPO_ROOT="/path/to/git-subrepo"
    export PATH="/path/to/git-subrepo/lib:$PATH"
    export MANPATH="/path/to/git-subrepo/man:$MANPATH"

See below for info on how to turn on Command Completion.

The third method is a standard system install, which puts C<git-subrepo> next
to your other git commands:

    make install        # Possibly with 'sudo'

This method does not account for upgrading and command completion yet.

=head2 Windows

This command is known to work in these Windows environments:

=over

=item * Git for Windows -- L<https://git-for-windows.github.io/>

=item * Babun -- L<http://babun.github.io/>

=item * Cygwin -- L<https://www.cygwin.com/>

=back

Let us know if there are others that it works (or doesn't work) in.

=head1 Testing

The C<git-subrepo> repository comes with a extensive test suite. You can
run it with:

    make test

or if you don't have C<make> on your system:

    prove -v test

=head1 Upgrading

If you used the C<.rc> or C<PATH> method of installation, just run this to
upgrade C<git-subrepo>:

    git subrepo upgrade

Or (same thing):

    cd /path/to/git-subrepo
    git pull

If you used C<make install> method, then run this again (after C<git pull>):

    make install        # Possibly with 'sudo'

=head1 Command Completion

The C<git subrepo> command supports C<< <TAB> >>-based command completion. If
you don't use the C<.rc> script (see Installation, above), you'll need to
enable this manually to use it.

=head2 In Bash

If your Bash setup does not already provide command completion for Git, you'll
need to enable that first:

    source <Git completion script>

On your system, the Git completion script might be found at any of the
following locations (or somewhere else that we don't know about):

=over

=item * C</etc/bash_completion.d/git>

=item * C</usr/share/bash-completion/git>

=item * C</usr/share/bash-completion/completions/git>

=item * C</opt/local/share/bash-completion/completions/git>

=item * C</usr/local/etc/bash_completion.d/git>

=item * C<~/.homebrew/etc/bash_completion.d/git>

=back

In case you can't find any of these, this repository contains a copy of the
Git completion script:

    source /path/to/git-subrepo/share/git-completion.bash

Once Git completion is enabled (whether you needed to do that manually or
not), you can turn on C<git-subrepo> completion with a command like this:

    source /path/to/git-subrepo/share/completion.bash

=head2 In zsh

In the Z shell (zsh), you can manually enable C<git-subrepo> completion by
adding the following line to your C<~/.zshrc>, B<before> the C<compinit>
function is called:

    fpath=('/path/to/git-subrepo/share/zsh-completion' $fpath)

=head1 Status

The git-subrepo command has been in use for well over a year and seems to get
the job done. Development is still ongoing but mostly just for fixing bugs.

Trying subrepo out is simple and painless (this is not C<git submodule>).
Nothing is permanent (if you do not push to shared remotes). ie You can always
play around and reset back to the beginning without pain.

This command has a test suite (run C<make test>), but surely has many bugs. If
you have expertise with Git and subcommands, please review the code, and file
issues on anything that seems wrong.

If you want to chat about the C<git-subrepo> command, join C<#gitcommands> on
C<irc.freenode.net>.

=head1 Notes

=over

=item * Works on POSIX systems: Linux, BSD, OSX, etc.

=item * Works on various Windows environments. See "Windows" section above.

=item * The C<git-subrepo> repo itself has 2 subrepos under the C<ext/> subdirectory.

=item * Written in (very modern) Bash, with full test suite. Take a look.

=item * A C<.gitrepo> file never is in the top level dir (next to a C<.git/> dir).

=back

=head1 Authors

=over

=item * Ingy döt Net <ingy@ingy.net>

=item * Magnus Carlsson <grimmymail@gmail.com>

=item * Austin Morgan <admorgan@morgancomputers.net>

=back

=head1 License and Copyright

The MIT License (MIT)

Copyright (c) 2013-2020 Ingy döt Net

=cut